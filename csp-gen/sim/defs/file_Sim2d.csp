
--
-- RoboSim generator version 3.0.0.202302061258
-- Automatically generated on 31-05-2023 16:59:19
--



module Goalie
exports

	transparent dbisim
	transparent sbisim
	transparent chase

	-- declaring channels
	-- allInputs = inputs_evars? false
	-- allOutputs = outputs_evars? false
	
	-- inputs, evars, rvars and outputs as calculated internally
	-- outputs = {}
	-- inputs = {}
	-- evars = {}
	-- dvars = {}
	
	-- declaring registerRead/Write datatypes
	datatype RegisterDataInput = i_UpdateCycle.Bool
	
	datatype RegisterDataOutput = o_UpdateCycle
	
	
	nametype RegisterOutputs = {||}
		
	nametype RegisterInputs = {||}
	
	
	channel endexec, terminate
	
	
	-- declaring call and ret events for undefined operations
	
	-- channel set with all visible events
	sem__events = {|endexec,terminate
	|}
	
	module stm_ref0
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase
	
		-- Transition identifiers
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_i0|
		              NID_f0
		
		channel internal__ : NIDS
		
		-- Flow channels		
		channel interrupt
		channel exited
		channel exit
		channel terminate
		
		-- Variable channels
		
		-- Shared variable channels
		
		-- Local variable channels for defined operations that are required by the state machine
		
		-- Declaring state machine events
		
		-- Declaring call and ret events for undefined operations
		
		enterSS = {|
		i0::enter,
		f0::enter
		|}
		
		enteredSS = 	{|
		f0::entered
		|}
		
		internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
		
		shared_variable_events = {|
		|}
		
		
		channel clockReset, clockResetL, clockResetR 
		
		localClockResets = {||}
		
		
		channel get_CLID_f0 : core_clock_type 
		--channel increment__
		
		CLID_f0_clock_type(id__) = 
			let
				max = (clock_type_max(Union({
		}))+1)
			ctype = {0..max}
		within
			if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
		
		
		
		-- RoboSim-specific declarations
		channel endexec, endexec_action
		channel endexec__ : NIDS
		channel startexec, startexec_action
		
		-- declaring registerRead/Write datatypes
		
		
		nametype RegisterOutputs = {||}
			
		nametype RegisterInputs = {||}
		
		
		-- variable channels
		
		-- channel set with all visible events
		sem__events = {|endexec,terminate
			|}
	
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				Timed(OneStep) {
					D__(id__,cycle_GoalieSTM_GoalieSTM) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,cycle_GoalieSTM_GoalieSTM) = D__(id__,cycle_GoalieSTM_GoalieSTM)
				}
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				Timed(OneStep) {
					--	Rule: behaviours(Node)
					D__(id__,cycle_GoalieSTM_GoalieSTM) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,cycle_GoalieSTM_GoalieSTM) = D__(id__,cycle_GoalieSTM_GoalieSTM)
				}
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			Timed(OneStep) {
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
		
			SOutputEvents = {}
			
			cycle(cycle_GoalieSTM_GoalieSTM) =
				let
			
					Cycle =
						Deadline(
							startexec -> CollectOutputs(SOutputEvents),0);
						TimeOut_1(terminate -> SKIP,WAIT(cycle_GoalieSTM_GoalieSTM-1);Cycle)
					
					CollectOutputs(sout) =
						(			endexec -> SKIP
						)
				within
					Cycle
			
			-- STM processes
			STM(id__,cycle_GoalieSTM_GoalieSTM) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			(
				cycle(cycle_GoalieSTM_GoalieSTM)
				[| {| endexec,startexec,terminate |} |]
				( 
					(
						(
							(startexec -> IteratedStateful(id__,cycle_GoalieSTM_GoalieSTM) \ {terminate}) 
							[| {share__} |]
							SKIP
						) ; 
						(let
							Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
						 within
						 	Ending
						)
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,cycle_GoalieSTM_GoalieSTM))
				)\sharedVarHide
			)\{startexec}
			
			STM_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			(
				cycle(cycle_GoalieSTM_GoalieSTM)
				[| {| endexec,startexec,terminate |} |]
				( 
					(
						(
							(startexec -> IteratedStateful_VS_O(id__,cycle_GoalieSTM_GoalieSTM) \ {terminate}) 
							[| {share__} |]
							SKIP
						) ; 
						(let
							Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
						 within
						 	Ending
						)
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,cycle_GoalieSTM_GoalieSTM))
				)\sharedVarHide
			)\{startexec}
			
			-- Transitions
			Transitions(id__,cycle_GoalieSTM_GoalieSTM) = ((let
				Trans = TimeOut_1(
					 (share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((((SKIP)[[ endexec <- endexec_action, startexec <- startexec_action ]]) ; f0::enter -> SKIP))))
					 []
					 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
					 []
					 (endexec -> SKIP ; share__choice(startexec -> SKIP))
					 )
				,SKIP);Trans
			within
				Trans [|{terminate}|> SKIP
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					(dbisim((dbisim((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__,cycle_GoalieSTM_GoalieSTM)
							   [| { share__, terminate } |] (
							   f0::D__(id__,cycle_GoalieSTM_GoalieSTM)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{|terminate,endexec,startexec|}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,cycle_GoalieSTM_GoalieSTM))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[ endexec__.x____  <- endexec | x____ <- NIDS ]]
						[[ endexec_action <- endexec ]]
						[[ startexec_action <- startexec ]]
					)
					)
					 [| union(stateClockSync,{terminate}) |]
					 StateClocks(id__)
					)\diff(stateClockSync,enteredSS))
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((let
					stateClockSync = {||}
				 within
					(MachineBody(id__,cycle_GoalieSTM_GoalieSTM) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
				)
				)
			
			IteratedBehaviour(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((let
					stateClockSync = {||}
				 within
					(MachineBody(id__,cycle_GoalieSTM_GoalieSTM)) \ union(stateClockSync,enteredSS)
				)
				)
			
			Stateful(id__,cycle_GoalieSTM_GoalieSTM) = 
				((let
					getsetLocalChannels = {||}
					clockSync = {||}
				within
					(Behaviour(id__,cycle_GoalieSTM_GoalieSTM) 
					 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
					 (varMemory(id__,cycle_GoalieSTM_GoalieSTM) [| {terminate} |] Clocks(id__))
				 	)\union(getsetLocalChannels,clockSync)
				)
				)
			
			IteratedStateful(id__,cycle_GoalieSTM_GoalieSTM) =
				(IteratedBehaviour(id__,cycle_GoalieSTM_GoalieSTM))
			
			-- Visible counterparts
			MachineBody_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					(dbisim((dbisim((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__,cycle_GoalieSTM_GoalieSTM)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__,cycle_GoalieSTM_GoalieSTM)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{|terminate,endexec,startexec|}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,cycle_GoalieSTM_GoalieSTM))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[ endexec__.x____  <- endexec | x____ <- NIDS ]]
						[[ endexec_action <- endexec ]]
						[[ startexec_action <- startexec ]]
					)
					)
					 [| union(stateClockSync,{terminate}) |]
					 StateClocks(id__)
					)\diff(stateClockSync,enteredSS))
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((let
					stateClockSync = {||}
				 within
					(MachineBody_VS_O(id__,cycle_GoalieSTM_GoalieSTM) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
				)
				)
			
			IteratedBehaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((let
					stateClockSync = {||}
				 within
					(MachineBody_VS_O(id__,cycle_GoalieSTM_GoalieSTM)) \ diff(union(stateClockSync,enteredSS),enteredSS)
				)
				)
			
			Stateful_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
				dbisim((let
					getsetLocalChannels = {||}
					clockSync = {||}
				within
					(Behaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM) 
					 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
					 (varMemory(id__,cycle_GoalieSTM_GoalieSTM) [| {terminate} |] Clocks(id__))
				 	)\union(getsetLocalChannels,clockSync)
				)
				)
			
			IteratedStateful_VS_O(id__,cycle_GoalieSTM_GoalieSTM) =
				(IteratedBehaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM))
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__,cycle_GoalieSTM_GoalieSTM) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,cycle_GoalieSTM_GoalieSTM) = STM_VS_O(id__,cycle_GoalieSTM_GoalieSTM) \ localClockResets
			D__(id__,cycle_GoalieSTM_GoalieSTM) = timed_priority(STM(id__,cycle_GoalieSTM_GoalieSTM) \ union(internal_events,localClockResets))
			O__(id__,cycle_GoalieSTM_GoalieSTM) = dbisim(D__(id__,cycle_GoalieSTM_GoalieSTM))
			VS__(id__,cycle_GoalieSTM_GoalieSTM) = FVS__(id__,cycle_GoalieSTM_GoalieSTM)
			VS_O__(id__,cycle_GoalieSTM_GoalieSTM) = dbisim(FVS__(id__,cycle_GoalieSTM_GoalieSTM))
			HEXT__(id__,cycle_GoalieSTM_GoalieSTM) = O__(id__,cycle_GoalieSTM_GoalieSTM) [|shared_variable_events|] SKIP
			FVS_C__(id__,cycle_GoalieSTM_GoalieSTM) = dbisim(timed_priority(STM(id__,cycle_GoalieSTM_GoalieSTM) \ internal_events))
			HUP__(id__,cycle_GoalieSTM_GoalieSTM) = timed_priority(O__(id__,cycle_GoalieSTM_GoalieSTM) [|{share__}|] SKIP)
			
			-- Clocks
			
			Clocks(id__) = terminate -> SKIP
			
			clockSync = {||}
			
			
			StateClocks(id__) = terminate -> SKIP
			
			stateClockSync = {||}
			
			
			-- Shared memory
			-- Shared memory variables
			
			
			-- sharedVarMemory process
			sharedVarMemory(id__,cycle_GoalieSTM_GoalieSTM) = (
			 (terminate -> SKIP
			 )
			 [| { terminate } |]
			 (terminate -> SKIP
			 )
			)
			
			sharedVarSync = union({||},
				  {||}
				 )
			
			sharedVarHide = union({||},
				  {||}
				 )
			
			}
	endmodule
	
	Timed(OneStep) {
	}
	
	Timed(OneStep) {
	-- (Rule 8) cycleController(...) : CSPProcess
	SOutputEvents = {}
	
	DVarsEvents = {}
	
	EVarsEvents = {}
	
	cycleController(id__,cycle_Goalie_Goalie) =
	let
				
	
	
		
		CycleController =
			Deadline(
			-- read inputs from the controller and pass to state machines
			(
			((registerRead.i_UpdateCycle?x__ ->
				SKIP))
			-- ensure state machines read the values being communicated via evars
					);
			-- synchronize on events related to evars to erase memory
			-- collect outputs, and monitor termination of the cycle, by all controllers
			(CollectOutputs(SOutputEvents) [| {endexec} |] Monitor),0);
			-- wait for the cycleDef period
			TimeOut_1(terminate -> SKIP,WAIT(cycle_Goalie_Goalie-1));
			-- recurse
			CycleController
			
									
		CollectOutputs(sout) =
			(
			endexec -> SKIP
			)
	
		Monitor = 
			(	 (stm_ref0::endexec -> SKIP)); endexec -> SKIP
	within
		CycleController
	
	-- (Rule 5) memoryComp(...) : CSPProcess
	memoryComp(id__) = (
		STOP)
	
	
	-- (Rule 7) [[ c : Controller ]]_C : CSPProcess
	D__(id__,cycle_Goalie_Goalie) =
	timed_priority(
		(
			(
				(
					(
					dbisim(cycleController(id__,cycle_Goalie_Goalie))
				 	 [| Union({{||},
				 	 		  {||},
				 	 		  {||},
				 	 		  {||}}) |]
				 	memoryComp(id__)
				 	)\{||}
					[| {| 	terminate,tock,
							stm_ref0::endexec|} |]
					-- (Rule 9) composeMachines(...) : CSPProcess
				 	((let
				 		cycle_GoalieSTM_GoalieSTM = cycle_Goalie_Goalie
				 	within
				 		(stm_ref0::D__(id__,cycle_GoalieSTM_GoalieSTM)
				 		\{| |})
				 		[[stm_ref0::terminate <- terminate]]
				 	)
				 	)
				) \ {|	stm_ref0::endexec |}
			) [| {terminate} |> SKIP
		)
	)
	
	O__(id__,cycle_Goalie_Goalie) = 
	timed_priority(
		dbisim(
			(
				(
					(
					dbisim(cycleController(id__,cycle_Goalie_Goalie))
				 	 [| Union({{||},
				 	 		  {||},
				 	 		  {||},
				 	 		  {||}}) |]
				 	memoryComp(id__)
				 	)\{||}
					[| {| 	terminate,tock,
							stm_ref0::endexec|} |]
					-- (Rule 9) composeMachines(...) : CSPProcess
				 	((let
				 		cycle_GoalieSTM_GoalieSTM = cycle_Goalie_Goalie
				 	within
				 		(stm_ref0::O__(id__,cycle_GoalieSTM_GoalieSTM)
				 		\{| |})
				 		[[stm_ref0::terminate <- terminate]]
				 	)
				 	)
				) \ {|	stm_ref0::endexec |}
			) [| {terminate} |> SKIP
		)
	)
	}
endmodule

module GoalieSTM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter
	|}
	
	enteredSS = 	{|
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_f0 : core_clock_type 
	--channel increment__
	
	CLID_f0_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
	-- RoboSim-specific declarations
	channel endexec, endexec_action
	channel endexec__ : NIDS
	channel startexec, startexec_action
	
	-- declaring registerRead/Write datatypes
	
	
	nametype RegisterOutputs = {||}
		
	nametype RegisterInputs = {||}
	
	
	-- variable channels
	
	-- channel set with all visible events
	sem__events = {|endexec,terminate
		|}

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,cycle_GoalieSTM_GoalieSTM) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,cycle_GoalieSTM_GoalieSTM) = D__(id__,cycle_GoalieSTM_GoalieSTM)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,cycle_GoalieSTM_GoalieSTM) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,cycle_GoalieSTM_GoalieSTM) = D__(id__,cycle_GoalieSTM_GoalieSTM)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		SOutputEvents = {}
		
		cycle(cycle_GoalieSTM_GoalieSTM) =
			let
		
				Cycle =
					Deadline(
						startexec -> CollectOutputs(SOutputEvents),0);
					TimeOut_1(terminate -> SKIP,WAIT(cycle_GoalieSTM_GoalieSTM-1);Cycle)
				
				CollectOutputs(sout) =
					(			endexec -> SKIP
					)
			within
				Cycle
		
		-- STM processes
		STM(id__,cycle_GoalieSTM_GoalieSTM) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		(
			cycle(cycle_GoalieSTM_GoalieSTM)
			[| {| endexec,startexec,terminate |} |]
			( 
				(
					(
						(startexec -> IteratedStateful(id__,cycle_GoalieSTM_GoalieSTM) \ {terminate}) 
						[| {share__} |]
						SKIP
					) ; 
					(let
						Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
					 within
					 	Ending
					)
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,cycle_GoalieSTM_GoalieSTM))
			)\sharedVarHide
		)\{startexec}
		
		STM_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		(
			cycle(cycle_GoalieSTM_GoalieSTM)
			[| {| endexec,startexec,terminate |} |]
			( 
				(
					(
						(startexec -> IteratedStateful_VS_O(id__,cycle_GoalieSTM_GoalieSTM) \ {terminate}) 
						[| {share__} |]
						SKIP
					) ; 
					(let
						Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
					 within
					 	Ending
					)
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,cycle_GoalieSTM_GoalieSTM))
			)\sharedVarHide
		)\{startexec}
		
		-- Transitions
		Transitions(id__,cycle_GoalieSTM_GoalieSTM) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((((SKIP)[[ endexec <- endexec_action, startexec <- startexec_action ]]) ; f0::enter -> SKIP))))
				 []
				 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 []
				 (endexec -> SKIP ; share__choice(startexec -> SKIP))
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited|})
						transSync = {|internal__.NID_i0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,cycle_GoalieSTM_GoalieSTM)
						   [| { share__, terminate } |] (
						   f0::D__(id__,cycle_GoalieSTM_GoalieSTM)
						   )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{|terminate,endexec,startexec|}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,cycle_GoalieSTM_GoalieSTM))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[ endexec__.x____  <- endexec | x____ <- NIDS ]]
					[[ endexec_action <- endexec ]]
					[[ startexec_action <- startexec ]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((let
				stateClockSync = {||}
			 within
				(MachineBody(id__,cycle_GoalieSTM_GoalieSTM) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((let
				stateClockSync = {||}
			 within
				(MachineBody(id__,cycle_GoalieSTM_GoalieSTM)) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,cycle_GoalieSTM_GoalieSTM) = 
			((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour(id__,cycle_GoalieSTM_GoalieSTM) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,cycle_GoalieSTM_GoalieSTM) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,cycle_GoalieSTM_GoalieSTM) =
			(IteratedBehaviour(id__,cycle_GoalieSTM_GoalieSTM))
		
		-- Visible counterparts
		MachineBody_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited|})
						transSync = {|internal__.NID_i0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,cycle_GoalieSTM_GoalieSTM)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__,cycle_GoalieSTM_GoalieSTM)
						   )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{|terminate,endexec,startexec|}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,cycle_GoalieSTM_GoalieSTM))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[ endexec__.x____  <- endexec | x____ <- NIDS ]]
					[[ endexec_action <- endexec ]]
					[[ startexec_action <- startexec ]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((let
				stateClockSync = {||}
			 within
				(MachineBody_VS_O(id__,cycle_GoalieSTM_GoalieSTM) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((let
				stateClockSync = {||}
			 within
				(MachineBody_VS_O(id__,cycle_GoalieSTM_GoalieSTM)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,cycle_GoalieSTM_GoalieSTM) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,cycle_GoalieSTM_GoalieSTM) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,cycle_GoalieSTM_GoalieSTM) =
			(IteratedBehaviour_VS_O(id__,cycle_GoalieSTM_GoalieSTM))
		
		-- END
		
		-- Memory
		-- Memory variables
		
		-- varMemory process
		varMemory(id__,cycle_GoalieSTM_GoalieSTM) = terminate -> SKIP
		
		getsetLocalChannels = {||}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,cycle_GoalieSTM_GoalieSTM) = STM_VS_O(id__,cycle_GoalieSTM_GoalieSTM) \ localClockResets
		D__(id__,cycle_GoalieSTM_GoalieSTM) = timed_priority(STM(id__,cycle_GoalieSTM_GoalieSTM) \ union(internal_events,localClockResets))
		O__(id__,cycle_GoalieSTM_GoalieSTM) = dbisim(D__(id__,cycle_GoalieSTM_GoalieSTM))
		VS__(id__,cycle_GoalieSTM_GoalieSTM) = FVS__(id__,cycle_GoalieSTM_GoalieSTM)
		VS_O__(id__,cycle_GoalieSTM_GoalieSTM) = dbisim(FVS__(id__,cycle_GoalieSTM_GoalieSTM))
		HEXT__(id__,cycle_GoalieSTM_GoalieSTM) = O__(id__,cycle_GoalieSTM_GoalieSTM) [|shared_variable_events|] SKIP
		FVS_C__(id__,cycle_GoalieSTM_GoalieSTM) = dbisim(timed_priority(STM(id__,cycle_GoalieSTM_GoalieSTM) \ internal_events))
		HUP__(id__,cycle_GoalieSTM_GoalieSTM) = timed_priority(O__(id__,cycle_GoalieSTM_GoalieSTM) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		
		StateClocks(id__) = terminate -> SKIP
		
		stateClockSync = {||}
		
		
		-- Shared memory
		-- Shared memory variables
		
		
		-- sharedVarMemory process
		sharedVarMemory(id__,cycle_GoalieSTM_GoalieSTM) = (
		 (terminate -> SKIP
		 )
		 [| { terminate } |]
		 (terminate -> SKIP
		 )
		)
		
		sharedVarSync = union({||},
			  {||}
			 )
		
		sharedVarHide = union({||},
			  {||}
			 )
		
		}
endmodule


